// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


//chema.prismaファイルの内容を元にデータベースの操作に利用するPrisma Clientを作成するために利用
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [postgis]
}

model User{
  id String @id @default(cuid())
  name String
  email String @unique
  password String
  imageUrl String?
  posts Post[]
  notes Note[]
  books Book[]
  comments Comment[]
}

model Post{
  id String @id @default(cuid())
  content String 
  createdAt DateTime @default(now())
  authorId String
  author User @relation(fields: [authorId], references:[id], onDelete:Cascade)
  imageUrl String?
  likedIds String[]
  open Boolean[]
  noteId String
  note Note @relation(fields: [noteId], references:[id], onDelete:Cascade)
  books PostBooks[]

  comments Comment[]
  
  location  Unsupported("geometry(Point, 4326)")?  // SRID 4326はWGS84座標系を表す null許容

  @@index([location], name: "location_idx", type: Gist)
}

model Note{
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  title String
  content String
  authorId String
  author User @relation(fields: [authorId], references:[id], onDelete:Cascade)
  imageUrl String?
  likedIds String[]
  open Boolean[]
  book String[]
  posts Post[]
}

model Book{
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  authorId String
  author User @relation(fields: [authorId], references:[id], onDelete:Cascade)
  imageUrl String?
  likedIds String[]
  open Boolean[]
  book String[]
  posts PostBooks[]
}

model PostBooks{
  postId String
  post Post @relation(fields: [postId], references:[id], onDelete:Cascade)
  bookId String
  book Book @relation(fields: [bookId], references:[id], onDelete:Cascade)
  assignedAt DateTime @default(now())

  @@id([postId, bookId])
}

model Comment{
  id String @id @default(cuid())
  body String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  userId String
  postId String

  author User @relation(fields: [userId], references:[id], onDelete:Cascade)
  post Post @relation(fields: [postId], references:[id], onDelete:Cascade)
}
